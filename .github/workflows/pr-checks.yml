name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  pr-title-check:
    runs-on: ubuntu-latest
    steps:
    - name: Check PR title format
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
        requireScope: false
        ignoreLabels: |
          ignore-semantic-pull-request


  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Check for security vulnerabilities
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check --json --output safety-report.json || echo "Security issues found"
        safety check || echo "Please review security report"

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mccabe
    
    - name: Check code complexity
      run: |
        # Check for complex functions (complexity > 10)
        python -m mccabe --min 10 . || echo "Complex functions found - consider refactoring"
    
    - name: Run code quality checks
      run: |
        echo "🔍 Running code quality analysis..."
        
        # Count lines of code
        echo "📏 Lines of code:"
        find . -name "*.py" -not -path "./tests/*" -not -path "./.venv/*" | xargs wc -l | tail -1
        
        # Check for TODO/FIXME comments
        echo "📝 TODO/FIXME comments:"
        grep -r "TODO\|FIXME" --include="*.py" . || echo "No TODO/FIXME comments found"
        
        # Check test coverage of new files
        echo "🔬 Checking if new files have corresponding tests..."
        git diff --name-only origin/main...HEAD | grep "\.py$" | grep -v test_ | while read file; do
          if [ -f "$file" ]; then
            test_file="tests/test_$(basename "$file")"
            if [ ! -f "$test_file" ]; then
              echo "⚠️ Warning: $file may need a corresponding test file at $test_file"
            fi
          fi
        done